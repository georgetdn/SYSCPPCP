[33mcommit b5abacb6263c0d18b2b36abe833a7c05bcb7c4d2[m
Author: georgetdn <gdobrescu@tdnsys.com>
Date:   Tue Nov 5 15:29:50 2024 -0500

    Fixed alignment for numbers in SELECT

[1mdiff --git a/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp b/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp[m
[1mindex 4f8c6e7..ce4d163 100644[m
[1m--- a/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp[m
[1m+++ b/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp[m
[36m@@ -71,9 +71,9 @@[m [mbool genSources(std::vector<std::string>& prefixes)[m
 					}[m
 					else if (isNativeType(dataType))[m
 					{[m
[31m-						sz = "(sizeof(" + dataType + ") * 2+2)";[m
[32m+[m						[32msz = "(sizeof(" + dataType + ") * 2+4)";[m
 						varcout += "    else if (var == \"" + value + "\")\n"[m
[31m-							"         std::cout << std::to_string(data." + value + ") << std::string(" + sz + " < (std::to_string(data." + value + ")).length() ? (std::to_string(data." + value + ")).length() - "+ sz + " : " + sz + " - (std::to_string(data." + value + ")).length(), ' ') << \" \";\n";[m
[32m+[m							[32m"         std::cout << std::fixed << std::setprecision(3) << std::right << std::setw(10) << data." + value + " << \" \";\n";[m
 					}[m
 					else[m
 					{ //check if enum and get size[m
[36m@@ -121,9 +121,9 @@[m [mbool genSources(std::vector<std::string>& prefixes)[m
 					}[m
 					else if (isNativeType(dataType))[m
 					{[m
[31m-						sz = "(sizeof(data." + value + ") * 2+2)";[m
 						hedcout += "    else if (var == \"" + value + "\")\n"[m
[31m-							"         std::cout << (std::string(\"" + value + "\").length() > 10 ? std::string(\"" + value + "\").substr(0, 10) : std::string(\"" + value + "\")) << (std::string(\"" + value + "\").length() > 10 ? \"\" : std::string(10 - std::string(\"" + value + "\").length(), ' ')) << \" \";\n";[m
[32m+[m							[32m"         std::cout << std::fixed << std::right << std::setw(10) << \"" + value + "\" << \" \";\n";[m
[32m+[m							[32m// "         std::cout << (std::string(\"" + value + "\").length() > 10 ? std::string(\"" + value + "\").substr(0, 10) : std::string(\"" + value + "\")) << (std::string(\"" + value + "\").length() > 10 ? \"\" : std::string(10 - std::string(\"" + value + "\").length(), ' ')) << \" \";\n";[m
 [m
 [m
 					}[m
[36m@@ -163,9 +163,8 @@[m [mbool genSources(std::vector<std::string>& prefixes)[m
 					}[m
 					else if (isNativeType(dataType))[m
 					{[m
[31m-						sz = "(sizeof(" + dataType + ") * 2+2)";[m
 						sepcout += "    else if (var == \"" + value + "\")\n"[m
[31m-							"          std::cout << std::string(" + sz + " , '-') << \" \";\n";[m
[32m+[m							[32m"          std::cout << std::string(10, '-') << \" \";\n";[m
 					}[m
 					else[m
 					{ //check if enum and get size[m

[33mcommit bdfef0221274efd5a5203ef8567dbc90afec9f23[m
Author: georgetdn <gdobrescu@tdnsys.com>
Date:   Mon Nov 4 17:37:47 2024 -0500

    Fix char field display in SQL

[1mdiff --git a/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp b/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp[m
[1mindex 8341fce..4f8c6e7 100644[m
[1m--- a/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp[m
[1m+++ b/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp[m
[36m@@ -66,7 +66,7 @@[m [mbool genSources(std::vector<std::string>& prefixes)[m
 						{[m
 							sz = "sizeof(" + dataType + ")";[m
 							varcout += "    else if (var == \"" + value + "\")\n"[m
[31m-								"         std::cout << std::string(sizeof(\"" + value + "\") - 1, ' ') << \" \";\n";[m
[32m+[m								[32m"         std::cout << data." + value + " << std::string(sizeof(\"" + value + "\") - 1, ' ') << \" \";\n";[m
 						}[m
 					}[m
 					else if (isNativeType(dataType))[m

[33mcommit a1da713ed4f540b1cfcb24a065058a4e3c7ae2ae[m
Author: georgetdn <gdobrescu@tdnsys.com>
Date:   Tue Oct 22 11:55:31 2024 -0400

    Initial commit

[1mdiff --git a/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp b/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..8341fce[m
[1m--- /dev/null[m
[1m+++ b/SYSCPPCP/SYSCPPCPcodeGenrtators/SmallSQLgenerator/genSourses.cpp[m
[36m@@ -0,0 +1,309 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m[32m#include <filesystem>[m
[32m+[m[32m#include <vector>[m
[32m+[m[32m#include <string>[m
[32m+[m[32m#include <fstream>[m
[32m+[m
[32m+[m[32mextern std::vector<std::vector<std::string>> enums;[m
[32m+[m[32mextern std::vector<std::vector<std::string>> structs;[m
[32m+[m[32mextern std::vector<std::vector<std::string>> variables;[m
[32m+[m
[32m+[m[32mbool isNativeType(std::string type);[m
[32m+[m
[32m+[m[32mbool genSources(std::vector<std::string>& prefixes)[m
[32m+[m[32m{[m
[32m+[m	[32mstd::ifstream inputFile("..\\TemplatesSmallSQL\\derClasses.cpp");[m
[32m+[m	[32mif (!inputFile) {[m
[32m+[m		[32mstd::cerr << "Error: Unable to open file for reading." << std::endl;[m
[32m+[m		[32mreturn false;[m
[32m+[m	[32m}[m
[32m+[m	[32mstd::ostringstream fileContent;[m
[32m+[m	[32mfileContent << inputFile.rdbuf();[m
[32m+[m	[32minputFile.close();[m
[32m+[m	[32mstd::string content = fileContent.str();[m
[32m+[m
[32m+[m	[32mfor (const std::string& prefix : prefixes)[m
[32m+[m	[32m{[m
[32m+[m		[32mstd::cout << "    Generating " << prefix << "Der and source files." << std::endl;[m
[32m+[m		[32mstd::string tmp = content;[m
[32m+[m		[32mwhile (tmp.find("###prefix") != std::string::npos)[m
[32m+[m			[32mtmp.replace(tmp.find("###prefix"), 9, prefix);[m
[32m+[m
[32m+[m		[32mstd::string GetRecordKey;[m
[32m+[m		[32mstd::string varcout;[m
[32m+[m		[32mstd::string hedcout;[m
[32m+[m		[32mstd::string sepcout;[m
[32m+[m		[32mstd::string SetValue;[m
[32m+[m		[32m// Use std::find_if to find the inner vector where the first value matches prefix[m
[32m+[m		[32mauto it = std::find_if(variables.begin(), variables.end(),[m
[32m+[m			[32m[&prefix](const std::vector<std::string>& vec) {[m
[32m+[m				[32mreturn !vec.empty() && vec[0] == prefix;[m
[32m+[m			[32m});[m
[32m+[m		[32mstd::string Else;[m
[32m+[m		[32mif (it != variables.end()) {[m
[32m+[m			[32mint i = 0;[m
[32m+[m			[32mstd::string dataType;[m
[32m+[m			[32mfor (auto& value : *it) {[m
[32m+[m				[32mif (i == 0)[m
[32m+[m				[32m{[m
[32m+[m					[32mi++;[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m				[32mif (i % 2 == 0)[m
[32m+[m				[32m{[m
[32m+[m					[32m//varcout[m
[32m+[m					[32m/////////[m
[32m+[m					[32mstd::string sz;[m
[32m+[m					[32mif (dataType.find("char") != std::string::npos)[m
[32m+[m					[32m{[m
[32m+[m						[32mif (dataType.find("[") != std::string::npos)[m
[32m+[m						[32m{[m
[32m+[m							[32msz = "sizeof(" + dataType + ")";[m
[32m+[m							[32mvarcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m								[32m"         std::cout << data." + value + " << std::string(sizeof(\"" + value + "\") < sizeof(" + dataType + ") ? sizeof(" + dataType + ") - std::strlen(data." + value + ") : sizeof(\"" + value + "\") - std::strlen(data." + value + "), ' ') << \" \";\n";[m
[32m+[m						[32m}[m
[32m+[m						[32melse[m
[32m+[m						[32m{[m
[32m+[m							[32msz = "sizeof(" + dataType + ")";[m
[32m+[m							[32mvarcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m								[32m"         std::cout << std::string(sizeof(\"" + value + "\") - 1, ' ') << \" \";\n";[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m					[32melse if (isNativeType(dataType))[m
[32m+[m					[32m{[m
[32m+[m						[32msz = "(sizeof(" + dataType + ") * 2+2)";[m
[32m+[m						[32mvarcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m							[32m"         std::cout << std::to_string(data." + value + ") << std::string(" + sz + " < (std::to_string(data." + value + ")).length() ? (std::to_string(data." + value + ")).length() - "+ sz + " : " + sz + " - (std::to_string(data." + value + ")).length(), ' ') << \" \";\n";[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{ //check if enum and get size[m
[32m+[m						[32mbool found = false;[m
[32m+[m						[32msize_t i = 0;[m
[32m+[m						[32mfor (const auto& row : enums) {[m
[32m+[m							[32mif (row[0] != prefix)[m
[32m+[m								[32mcontinue;[m
[32m+[m							[32mfor (const auto& str : row) {[m
[32m+[m								[32mif (str == dataType)[m
[32m+[m								[32m{[m
[32m+[m									[32mfound = true;[m
[32m+[m									[32mcontinue;[m
[32m+[m								[32m}[m
[32m+[m								[32mif (i < str.length())[m
[32m+[m									[32mi = str.length();[m
[32m+[m							[32m}[m
[32m+[m							[32mif (found)[m
[32m+[m							[32m{[m
[32m+[m								[32msz = std::to_string(i + 1);[m
[32m+[m								[32mvarcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m									[32m"         std::cout << "+dataType + "Array[data." + value + "] << std::string(" + sz + " -  std::strlen("+dataType + "Array[data." + value + "]), ' ');\n";[m
[32m+[m								[32mfound = false;[m
[32m+[m							[32m}[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m					[32m////////////[m
[32m+[m					[32mGetRecordKey += "    else if (var == \"" + value + "\")\n"[m
[32m+[m						[32m"    {\n"[m
[32m+[m						[32m"        return &";[m
[32m+[m					[32mstd::string stmp = value;[m
[32m+[m					[32mwhile (stmp.find(".") != std::string::npos)[m
[32m+[m						[32mstmp.replace(stmp.find("."), 1, "");[m
[32m+[m
[32m+[m					[32mGetRecordKey += stmp;[m
[32m+[m					[32mGetRecordKey += "Key;\n"[m
[32m+[m						[32m"    }\n";[m
[32m+[m					[32m////////////////[m
[32m+[m					[32m//hedcout[m[41m [m
[32m+[m					[32mif (dataType.find("char") != std::string::npos)[m
[32m+[m					[32m{[m
[32m+[m						[32msz = "sizeof(\"" + value + "\")";[m
[32m+[m						[32mhedcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m							[32m"         std::cout << \"" + value + "\" << std::string((sizeof(data." + value + ") > sizeof(\"" + value + "\")) ? sizeof(data." + value + ") - sizeof(\"" + value + "\") : 0, ' ') << \"  \";\n";[m
[32m+[m					[32m}[m
[32m+[m					[32melse if (isNativeType(dataType))[m
[32m+[m					[32m{[m
[32m+[m						[32msz = "(sizeof(data." + value + ") * 2+2)";[m
[32m+[m						[32mhedcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m							[32m"         std::cout << (std::string(\"" + value + "\").length() > 10 ? std::string(\"" + value + "\").substr(0, 10) : std::string(\"" + value + "\")) << (std::string(\"" + value + "\").length() > 10 ? \"\" : std::string(10 - std::string(\"" + value + "\").length(), ' ')) << \" \";\n";[m
[32m+[m
[32m+[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{ //check if enum and get size[m
[32m+[m						[32mbool found = false;[m
[32m+[m						[32msize_t i = 0;[m
[32m+[m						[32mfor (const auto& row : enums) {[m
[32m+[m							[32mif (row[0] != prefix)[m
[32m+[m								[32mcontinue;[m
[32m+[m							[32mfor (const auto& str : row) {[m
[32m+[m								[32mif (str == dataType)[m
[32m+[m								[32m{[m
[32m+[m									[32mfound = true;[m
[32m+[m									[32mcontinue;[m
[32m+[m								[32m}[m
[32m+[m								[32mif (i < str.length())[m
[32m+[m									[32mi = str.length();[m
[32m+[m							[32m}[m
[32m+[m							[32mif (found)[m
[32m+[m							[32m{[m
[32m+[m								[32msz = std::to_string(i+1);[m
[32m+[m								[32mhedcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m									[32m"          std::cout << \""+ value + "\" << std::string(" + sz + " < std::strlen(\"" + value + "\") ? std::strlen(\"" + value + "\") - " + sz + " : " + sz + " - std::strlen(\"" + value + "\"), ' ');\n";[m
[32m+[m								[32mfound = false;[m
[32m+[m							[32m}[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m/////////////////[m
[32m+[m					[32m//sepcout[m
[32m+[m					[32mif (dataType.find("char") != std::string::npos)[m
[32m+[m					[32m{[m
[32m+[m						[32msz = "sizeof(" + dataType + ")";[m
[32m+[m						[32msepcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m							[32m"         std::cout << std::string((" + sz + " > sizeof(\"" + value + "\")) ? " + sz + " : sizeof(\"" + value + "\"), '-') << \" \";\n";[m
[32m+[m					[32m}[m
[32m+[m					[32melse if (isNativeType(dataType))[m
[32m+[m					[32m{[m
[32m+[m						[32msz = "(sizeof(" + dataType + ") * 2+2)";[m
[32m+[m						[32msepcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m							[32m"          std::cout << std::string(" + sz + " , '-') << \" \";\n";[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{ //check if enum and get size[m
[32m+[m						[32mbool found = false;[m
[32m+[m						[32msize_t i = 0;[m
[32m+[m						[32mfor (const auto& row : enums) {[m
[32m+[m							[32mif (row[0] != prefix)[m
[32m+[m								[32mcontinue;[m
[32m+[m							[32mfor (const auto& str : row) {[m
[32m+[m								[32mif (str == dataType)[m
[32m+[m								[32m{[m
[32m+[m									[32mfound = true;[m
[32m+[m									[32mcontinue;[m
[32m+[m								[32m}[m
[32m+[m								[32mif (i < str.length())[m
[32m+[m									[32mi = str.length();[m
[32m+[m							[32m}[m
[32m+[m							[32mif (found)[m
[32m+[m							[32m{[m
[32m+[m								[32msz = std::to_string(i);[m
[32m+[m								[32msepcout += "    else if (var == \"" + value + "\")\n"[m
[32m+[m									[32m"          std::cout << std::string(" + sz + " , '-') << \" \";\n";[m
[32m+[m								[32mfound = false;[m
[32m+[m							[32m}[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m					[32m///////////[m
[32m+[m					[32m//SetValue[m
[32m+[m					[32mif (dataType.find("char") != std::string::npos)[m
[32m+[m					[32m{[m
[32m+[m						[32mif (dataType.find("[") != std::string::npos)[m
[32m+[m						[32m{[m
[32m+[m							[32mSetValue += Else + " if (col == \"" + value + "\")\n     INIT_STR(data." + value + ", val.c_str())\n";[m
[32m+[m							[32mElse = "else";[m
[32m+[m						[32m}[m
[32m+[m						[32melse[m
[32m+[m						[32m{[m
[32m+[m							[32mSetValue += Else + " if (col == \"" + value + "\")\n     data." + value + " = val[0];\n";[m
[32m+[m							[32mElse = "else";[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m					[32melse if (isNativeType(dataType))[m
[32m+[m					[32m{[m
[32m+[m						[32mif (dataType == "float" || dataType == "double" || dataType == "long double")[m
[32m+[m						[32m{[m
[32m+[m							[32mif (dataType == "float") {[m
[32m+[m								[32mSetValue += Else + " if (col == \"" + value + "\")\n     data." + value + " = std::stof(val) ;\n";[m
[32m+[m							[32m}[m
[32m+[m							[32melse if (dataType == "double") {[m
[32m+[m								[32mSetValue += Else + " if (col == \"" + value + "\")\n     data." + value + " = std::stod(val) ;\n";[m
[32m+[m							[32m}[m
[32m+[m							[32melse if (dataType == "long double") {[m
[32m+[m								[32mSetValue += Else + " if (col == \"" + value + "\")\n     data." + value + " = std::stold(val) ;\n";[m
[32m+[m							[32m}[m
[32m+[m						[32m}[m
[32m+[m						[32melse[m
[32m+[m						[32m{[m
[32m+[m							[32mSetValue += Else + " if (col == \"" + value + "\")\n     data." + value + " = std::stoi(val);\n";[m
[32m+[m						[32m}[m
[32m+[m						[32mElse = "else";[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{ //check if enum and get size[m
[32m+[m						[32mbool found = false;[m
[32m+[m						[32msize_t i = 0;[m
[32m+[m						[32mfor (const auto& row : enums) {[m
[32m+[m							[32mif (row[0] != prefix)[m
[32m+[m								[32mcontinue;[m
[32m+[m							[32mif(row[1] != dataType)[m
[32m+[m								[32mcontinue;[m
[32m+[m							[32mfor (const auto& str : row) {[m
[32m+[m								[32mif (str == prefix)[m
[32m+[m									[32mcontinue;[m
[32m+[m								[32mif (str == dataType)[m
[32m+[m								[32m{[m
[32m+[m									[32mfound = true;[m
[32m+[m									[32mSetValue += Else + " if (col == \"" + value + "\")\n{\n";[m
[32m+[m									[32mElse = "else";[m
[32m+[m									[32mcontinue;[m
[32m+[m								[32m}[m
[32m+[m								[32mSetValue += "        if ( val == \"" + dataType + "::" + str + "\" || val == \"" + str + "\")\n              data." + value + " = " + dataType + "::" + str + ";\n";[m
[32m+[m
[32m+[m							[32m}[m
[32m+[m							[32mSetValue += "}\n";[m
[32m+[m							[32mif (found)[m
[32m+[m								[32mbreak;[m
[32m+[m						[32m}[m
[32m+[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32mdataType = value;[m
[32m+[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mi++;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m		[32m}[m
[32m+[m		[32melse {[m
[32m+[m			[32mstd::cout << "No inner vector found with the prefix: " << prefix << std::endl;[m
[32m+[m			[32mreturn false;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32msize_t Pos = tmp.find("###varcout");[m
[32m+[m		[32mif (Pos != std::string::npos) {[m
[32m+[m			[32mtmp.replace(Pos, std::string("###varcout").length(), varcout);[m
[32m+[m		[32m}[m
[32m+[m		[32mPos = tmp.find("###GetRecordKey");[m
[32m+[m		[32mif (Pos != std::string::npos) {[m
[32m+[m			[32mtmp.replace(Pos, std::string("###GetRecordKey").length(), GetRecordKey);[m
[32m+[m		[32m}[m
[32m+[m		[32mPos = tmp.find("###hedcout");[m
[32m+[m		[32mif (Pos != std::string::npos) {[m
[32m+[m			[32mtmp.replace(Pos, std::string("###hedcout").length(), hedcout);[m
[32m+[m		[32m}[m
[32m+[m		[32mPos = tmp.find("###sepcout");[m
[32m+[m		[32mif (Pos != std::string::npos) {[m
[32m+[m			[32mtmp.replace(Pos, std::string("###sepcout").length(), sepcout);[m
[32m+[m		[32m}[m
[32m+[m		[32mPos = tmp.find("###SetValue");[m
[32m+[m		[32mif (Pos != std::string::npos) {[m
[32m+[m			[32mtmp.replace(Pos, std::string("###SetValue").length(), SetValue);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m
[32m+[m		[32m// Write the updated content back to the file[m
[32m+[m		[32mstd::string outFileName = "..\\..\\SmallSQLsource\\" + prefix + "Der.cpp";[m
[32m+[m		[32mstd::ofstream outputFile(outFileName);[m
[32m+[m		[32mif (!outputFile) {[m
[32m+[m			[32mstd::cerr << "Error: Unable to open file for writing." << std::endl;[m
[32m+[m			[32mreturn false;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32moutputFile << tmp;[m
[32m+[m		[32moutputFile.close();[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn true;[m
[32m+[m[32m}[m
[32m+[m
